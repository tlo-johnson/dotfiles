require("hs.ipc")
hs.ipc.cliInstall()

choose = '/usr/local/bin/choose -c transparent'

windowPositions = {
  ['bottom-left'] = "0, 3.33, 6, ",
  ['bottom-middle'] = "3.33, 3.33, 6, ",
  ['bottom-right'] = "6.66, , 6, ",
  ['top-left'] = "0, 3.33, 0, 6",
  ['top-middle'] = "3.33, 3.33, 0, 6",
  ['top-right'] = "6.66, , 0, 6",
}

hs.hotkey.bind('alt', 'space', function()
  hs.application.frontmostApplication():selectMenuItem({'Help'})
end)

function userCommands()
  local commands = {
    ['window'] = windowCommands,
    ['dev-tools'] = devTools,
    ['focus-editor'] = focusEditor,
    ['get-password'] = getPassword,
    ['reload'] = reload,
    ['open-bookmark'] = openBookmark,
    ['start-work'] = startWork,
  }
  performCommand(commands)
end

hs.hotkey.bind({'ctrl', 'alt', 'shift'}, 'space', userCommands)

function windowCommands()
  local commands = {
    ['resize'] = resizeWindow,
    ['position'] = positionWindow,
    ['span-column'] = function() spanWindow('column') end,
    ['span-row'] = function() spanWindow('row') end,
  }
  performCommand(commands)
end

function performCommand(commands)
  local _, action = getChoice(commands)
  action()
end

function openBookmark()
  local bookmarks = {
    ['stoke-wireframe'] = 'https://xd.adobe.com/view/14581303-8c3c-481b-87f4-ca25f70f9ed0-410b/screen/4cb672de-328b-4e50-8d31-366106fd0989',
    ['cm-gql'] = 'https://cm-graphql-service-dot-heb-cm-dev1.uc.r.appspot.com/',
    ['cm-figma-jv'] = "https://www.figma.com/file/1SMwfAg40kn9aWNTxwIH5T/Joe-V's?node-id=1062%3A18471"
  }

  local _, action = getChoice(bookmarks);
  hs.execute('open ' .. action)
end

function startWork()
  hs.application.open('org.mozilla.firefoxdeveloperedition', 5, true);
  setWindowPosition(windowPositions['top-left']);

  hs.application.open('com.apple.mail', 5, true);
  setWindowPosition(windowPositions['bottom-right']);

  hs.application.open('com.apple.iCal', 5, true);
  setWindowPosition(windowPositions['bottom-left']);

  hs.application.open('com.tinyspeck.slackmacgap', 5, true);
  setWindowPosition(windowPositions['bottom-middle']);

  hs.application.open('com.googlecode.iterm2', 2, true);
  setWindowPosition(windowPositions['top-middle']);
  focusEditor();
end

function positionWindow()
  local choice = getChoice(windowPositions);
  setWindowPosition(windowPositions[choice]);
end

function spanWindow(dimension)
  local window, input = getKeyboardInput('number of ' .. dimension)
  window:focus()

  local frame = window:frame()
  local position;
  if dimension == 'column' then position = hs.geometry.new(frame.x, frame.y, input * frame.w, frame.h) end
  if dimension == 'row' then position = hs.geometry.new(frame.x, frame.y, frame.w, input * frame.h) end
  window:setFrame(position);
end

function getPassword()
  hs.execute('pass -c $(ls -R ~/.password-store | grep gpg | cut -d "." -f 1 | ' .. choose .. ')', true)
  hs.application.frontmostApplication():selectMenuItem({'Edit', 'Paste'});
end

function getChoice(choices)
  local commands = ''
  for key in pairs(choices) do commands = commands .. '\\\\n' .. key end
  local choice = hs.execute('echo ' .. commands .. '| ' .. choose)

  local action
  for key, value in pairs(choices) do
    if choice == key then action = value end
  end

  return choice, action
end

function getKeyboardInput(message)
  local currentWindow = hs.window.focusedWindow()
  hs.focus()
  local isCancelled, response = hs.dialog.textPrompt("hammerspoon", message, '', 'OK', 'Cancel')

  if isCancelled == 'Cancel' then
    currentWindow:focus()
    return
  end

  return currentWindow, response
end

function reload()
  hs.reload()
  hs.alert.show('Config loaded')
end

function resizeWindow()
  local currentWindow = hs.window.focusedWindow()

  hs.focus()
  local btnSelected, response = hs.dialog.textPrompt("resize window", "enter unit dimensions (x, dx, y, dy)", '', 'OK', 'Cancel')
  if btnSelected == 'Cancel' then return end

  currentWindow:focus();
  setWindowPosition(response);
end

function setWindowPosition(position)
  local currentWindow = hs.window.focusedWindow()
  local components = split(position, ",")
  local x = tonumber(components[1]) or 0
  local dx = tonumber(components[2]) or (10 - x)
  local y = tonumber(components[3]) or 0
  local dy = tonumber(components[4]) or (10 - y)

  dx = dx / 10
  x = x / 10
  dy = dy / 10
  y = y / 10

  currentWindow:moveToUnit(hs.geometry.rect(x, y, dx, dy))
end

function split(str, delimiter)
  result = {};
  for match in (str..delimiter):gmatch("(.-)"..delimiter) do
    table.insert(result, match)
  end
  return result
end

function showDialog(message)
  hs.dialog.blockAlert('hammerspoon', message)
end

function devTools()
  hs.application.frontmostApplication():selectMenuItem({'View', 'Developer', 'JavaScript Console'})
end

function waitingForWindow(title, func)
  if hs.window.find(title) then return end
  hs.timer.delayed.new(0.5, func):start()
  return true
end

function focusEditor()
  hs.layout.apply({
    {"com.googlecode.iterm2", nil, nil, {x = 0.333, y = 0, w = (1 - 0.333), h = 0.6}, nil, nil},
  })
end

hs.window.filter.new('Brave Browser')
  :subscribe(hs.window.filter.windowFocused, function()
    if braveModal then return true end

    braveBindings = {
      hs.hotkey.bind('cmd', '1', function()
        hs.application.frontmostApplication():selectMenuItem({ 'Profiles', 'Default' })
      end),

      hs.hotkey.bind('cmd', '2', function()
        hs.application.frontmostApplication():selectMenuItem({ 'Profiles', 'Central Market' })
      end),

      hs.hotkey.bind('cmd', '3', function()
        hs.application.frontmostApplication():selectMenuItem({ 'Profiles', 'Stoke' })
      end),
    }
  end)
  :subscribe(hs.window.filter.windowUnfocused, function()
    for key, binding in pairs(braveBindings) do binding:delete() end
  end)

hs.window.filter.new('Google Chrome')
  :subscribe(hs.window.filter.windowFocused, function()
    if chromeModal then return true end

    chromeBindings = {
      hs.hotkey.bind('cmd', '1', function()
        hs.application.frontmostApplication():selectMenuItem({ 'People', 'T-Lo' })
      end),

      hs.hotkey.bind('cmd', '2', function()
        hs.application.frontmostApplication():selectMenuItem({ 'People', 'Nutrien' })
      end),

      hs.hotkey.bind('cmd', '3', function()
        hs.application.frontmostApplication():selectMenuItem({ 'People', 'Nutrien Admin' })
      end),

      hs.hotkey.bind('cmd', '4', function()
        hs.application.frontmostApplication():selectMenuItem({ 'People', 'Tolu (Stoke)' })
      end)
    }

    chromeModal = hs.hotkey.modal.new({'ctrl', 'alt', 'cmd'}, 'space')

    chromeModal:bind('', 'c', function()
      chromeModal:exit()
      local chrome = hs.appfinder.appFromName('Google Chrome')
      chrome:selectMenuItem({ 'View', 'Developer', 'JavaScript Console' })
    end)

    chromeModal:bind('', 'p', function()
      chromeModal:exit()

      function deleteModalBindings()
        for i, binding in pairs(chromeModalBindings) do binding:delete() end
      end

      function selectChromeMenu(option)
        hs.appfinder.appFromName('Google Chrome'):selectMenuItem(option)
      end

      chromeModalBindings = {
        hs.hotkey.bind('', 'escape', function()
          deleteModalBindings()
        end),

        hs.hotkey.bind('', 'a', function()
          deleteModalBindings()
          selectChromeMenu({'People', 'Nutrien Admin'})
        end),

        hs.hotkey.bind('', 'd', function()
          deleteModalBindings()
          selectChromeMenu({'People', 'Nutrien Dev'})
        end),

        hs.hotkey.bind('', 'n', function()
          deleteModalBindings()
          selectChromeMenu({'People', 'Nutrien'})
        end),

        hs.hotkey.bind('', 't', function()
          deleteModalBindings()
          selectChromeMenu({'People', 'T-Lo'})
        end)
      }
    end)

    chromeModal:bind('', 'escape', function()
      chromeModal:exit()
    end)
  end)
  :subscribe(hs.window.filter.windowUnfocused, function()
    chromeModal:delete()
    chromeModal = nil

    for key, binding in pairs(chromeBindings) do binding:delete() end
  end)

hs.ipc.cliInstall()
hs.alert.show('Config loaded')
